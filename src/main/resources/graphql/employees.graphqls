type Employee {
    id: ID!
    firstName: String!
    middleName: String!
    lastName: String!
    birthdate: String!
    gender: String!
    maritalStatus: String!
    position: String!
    dateHired: String!
    contacts: [Contact]
    addresses: [Address]
}

type Contact {
    id: ID!
    value: String!
    isPrimary: Boolean!
}

type Address {
    id: ID!
    addressOne: String!
    addressTwo: String!
    isPrimary: Boolean!
}

input ContactInput {
    value: String!
    isPrimary: Boolean!
}

input AddressInput {
    addressOne: String!
    addressTwo: String!
    isPrimary: Boolean!
}

input ContactUpdateInput {
    id: ID
    value: String!
    isPrimary: Boolean!
}

input AddressUpdateInput {
    id: ID
    addressOne: String!
    addressTwo: String!
    isPrimary: Boolean!
}

type Query {
    employees: [Employee]
    employee(id: ID!): Employee
}

type Mutation {
    employee(request: EmployeeInput!): Employee!
    updateEmployee(id: ID!, request: EmployeeUpdateInput!): Employee!
    deleteEmployee(id: ID!): String!
}

input EmployeeInput {
    firstName: String!
    middleName: String!
    lastName: String!
    birthdate: String!
    gender: String!
    maritalStatus: String!
    position: String!
    dateHired: String!
    contacts: [ContactInput]
    addresses: [AddressInput]
}
input EmployeeUpdateInput {
    firstName: String!
    middleName: String!
    lastName: String!
    birthdate: String!
    gender: String!
    maritalStatus: String!
    position: String!
    dateHired: String!
    contacts: [ContactUpdateInput]
    addresses: [AddressUpdateInput]
}

